#!/usr/bin/python3

import pkg_resources
pkg_resources.require('PyYAML>=5.1.1')

from io import StringIO
import re
import sys
import yaml

with open(sys.argv[1], "r") as stream:
    try:
        data = yaml.safe_load(stream)
    except yaml.YAMLError as exc:
        print(f"Error parsing PrivateRegistry input {exc}", file=sys.stderr)
        sys.exit(1)

# We make this an associative array. Can't do it in the
# input yaml since there is a '/' in the key
images = {}
rename_images = {}
for image in data["images"]:
    new_name = None
    tag = None
    prefix = None
    if "new_name" in image:
        new_name = image["new_name"]
    if "tag" in image:
        tag = image["tag"]
    if "prefix" in image:
        prefix = image["prefix"]
    img_obj = {"tag": tag, "new_name": new_name, "prefix": prefix}
    if "labels" in image:
        img_obj["labels"] = image["labels"]
    if image["name"] not in images:
        images[image["name"]] = []
    images[image["name"]].append(img_obj)


match_list = [
    "DaemonSet",
    "Deployment",
    "StatefulSet",
    "ReplicaSet",
    "CronJob",
    "Job",
    "Pod",
]


def label_match(img, doc):
    # If no label is specified in pattern, match all
    if "labels" not in img:
        return True

    for label in img["labels"]:
        if (
            label not in doc["metadata"]["labels"]
            or img["labels"][label] != doc["metadata"]["labels"][label]
        ):
            return False
    return True

def update_container(obj, container, images):
    image = container["image"].split(":")[0]
    if image in images:
        for target in images[image]:
            if label_match(target, obj):
                new_name = image
                if target["new_name"]:
                    new_name = target["new_name"]
                if target["prefix"]:
                    new_name = target["prefix"] + "/" + new_name
                if target["tag"]:
                    container["image"] = new_name + ":" + str(target["tag"])
                else:
                    container["image"] = new_name


def set_tag(obj, images):
    spec = None
    if obj["kind"] == "CronJob":
        spec = obj["spec"]["jobTemplate"]["spec"]["template"]["spec"]
    if obj["kind"] == "Pod":
        spec = obj["spec"]
    if (
        obj["kind"] == "Deployment"
        or obj["kind"] == "StatefulSet"
        or obj["kind"] == "DaemonSet"
        or obj["kind"] == "ReplicaSet"
        or obj["kind"] == "Job"
    ):
        spec = obj["spec"]["template"]["spec"]
    if not spec:
        print(f"Error: no spec found for obj {obj}", file=sys.stderr)
        sys.exit(1)
    if "containers" not in spec:
        print(f"Error: no containers found in obj {obj}", file=sys.stderr)
        sys.exit(1)

    for container in spec["containers"]:
        update_container(obj, container, images)

    for container in spec.get("initContainers", []):
        update_container(obj, container, images)

    print("---")
    print(yaml.dump(obj, default_flow_style=False))


def scrub(raw):
    """ This patches up some yaml issues that arise from a difference of
        opinion on quoting of oerators. E.g. prometheus bundle has:
        enum: [ '!=', '=', ...]
        and kustomize removes the '' around the =.
    """
    raw = re.sub(r'- =~$', "- '=~'", raw, flags=re.M |re.DOTALL)
    raw = re.sub(r'- =$', "- '='", raw, flags=re.M |re.DOTALL)
    return raw

try:
    if len(sys.argv) > 2:
        raw_data = scrub(f.read())
        f = StringIO(raw_data)
    else:
        raw_data = scrub(sys.stdin.read())
        f = StringIO(raw_data)
    for yaml_input in yaml.safe_load_all(f):
        if yaml_input and yaml_input["kind"] in match_list:
            set_tag(yaml_input, images)
        else:
            print("---")
            print(yaml.dump(yaml_input, default_flow_style=False))
except yaml.YAMLError as exc:
    print("Error parsing YAML in ImageTransformer", file=sys.stderr)
    sys.exit(1)
