#!/usr/bin/env /usr/bin/python3

import pkg_resources
pkg_resources.require('PyYAML>=5.1.1')

import sys
import textwrap
from itertools import tee
import yaml
import hashlib
from collections import defaultdict
import json

import gateway


def chash(w):
    h = hashlib.sha256(w.encode("utf-8"))
    return h.hexdigest()[:4]


with open(sys.argv[1], "r") as stream:
    try:
        rd = lambda: defaultdict(rd)
        data = rd()
        data.update(yaml.safe_load(stream))
    except yaml.YAMLError as exc:
        print(
            "Error parsing IstioIngressGenerator generator input (%s)",
            file=sys.stderr,
        )
        sys.exit(1)

if not "namespace" in data["metadata"]:
    data["metadata"]["namespace"] = "default"


def make_gateway(data, secret_name, allow_plaintext):
    name_is_unique = data.get('name_is_unique', False)
    if name_is_unique:
        name = f"{data['name']}-gw"
    else:
        name = f"{data['name']}-{data['metadata']['namespace']}-gw"

    gw = yaml.safe_load(gateway.spec.format(name=name))

    https_server = yaml.safe_load(gateway.base_server.format(data=data,
                                                             secret_name=secret_name))
    gw["spec"]["servers"].append(https_server)
    return gw


def gen(data, name, namespace, hostname, match_routes, issuer):
    name_is_unique = data.get('name_is_unique', False)
    if name_is_unique:
        uhash_name = f"{data['name']}"
        cert_name = f"{uhash_name}"
        hash_name = chash(uhash_name)
        secret_name = f"h{hash_name}-{data['name']}"
    else:
        uhash_name = f"{data['name']}-{data['metadata']['namespace']}"
        cert_name = f"{uhash_name}-certificate"
        hash_name = chash(uhash_name)
        secret_name = f"h{hash_name}-{data['name']}-{data['metadata']['namespace']}-certificate"

    common_name = data.get('common_name', data['hostname'])
    gw_name = f"{uhash_name}-gw"
    allow_plaintext = data.get("allow_plaintext", False)

    cert = f"""
---
apiVersion: cert-manager.io/v1alpha2
kind: Certificate
metadata:
  name: {cert_name}
  namespace: istio-system
spec:
  secretName: {secret_name}
  issuerRef:
    name: {data['issuer']}
  commonName: {common_name}
  dnsNames:
    - {common_name}
    - {data['hostname']}"""

    vs = f"""
---
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: {data['name']}-{data['metadata']['namespace']}-vs
  namespace: {data['metadata']['namespace']}
spec:
  hosts:
    - {data['hostname']}
  gateways:
    - istio-system/{gw_name}
"""
    cert_yaml = yaml.safe_load(cert)
    cert_yaml["spec"]["dnsNames"] = list(set(cert_yaml["spec"]["dnsNames"]))

    gw = make_gateway(data, secret_name, allow_plaintext)
    vs_yaml = yaml.safe_load(vs)
    if allow_plaintext:
        # Istio intercepts all plaintext http on this gateway.
        vs_yaml["spec"]["gateways"].append(
          "istio-system/istio-autogenerated-k8s-ingress"
        )
    else:
        for m in data["match_routes"]["http"]:
            if 'headers' not in m:
                m['headers'] = {}
            if 'response' not in m['headers']:
                m['headers']['response'] = {}
            if 'set' not in m['headers']['response']:
                m['headers']['response']['set'] = {}
            if 'Strict-Transport-Security' not in m['headers']['response']['set']:
                 m['headers']['response']['set']['Strict-Transport-Security'] = 'max-age=63072000; includeSubDomains'
            if 'Expect-CT' not in m['headers']['response']['set']:
                 m['headers']['response']['set']['Expect-CT'] = 'enforce, max-age=7776000, report-uri="/.well-known/csp-violation-report-endpoint/"'
            # only add the default remove header if not present
            if 'remove' not in m['headers']['response']:
                m['headers']['response']['remove'] = ['x-envoy-upstream-service-time']

    # Add defaults to the route configuration
    for m in data.get("match_routes", {}).get("http", []):
        retries = m.setdefault('retries', {})
        if 'retryOn' not in retries:
            retries['retryOn'] = 'connect-failure,refused-stream,unavailable,cancelled,resource-exhausted,5xx,retriable-status-codes'
        if 'attempts' not in retries:
            retries['attempts'] = 5

    print(yaml.dump(cert_yaml))
    print ("---")
    print(yaml.dump(vs_yaml))
    print(textwrap.indent(yaml.dump(data["match_routes"], indent=2), 2 * " "))
    print ("---")
    print(yaml.dump(gw))
    if "cookie_hash" in data and data["cookie_hash"]:
        data["destination"]["loadBalancer"]["consistentHash"]["httpCookie"][
            "name"
        ] = "agilicus-lb"
        data["destination"]["loadBalancer"]["consistentHash"]["httpCookie"][
            "ttl"
        ] = "0s"
        data["destination"]["loadBalancer"]["consistentHash"]["httpCookie"][
            "path"
        ] = "/"

    host = data['match_routes']['http'][0]['route'][0]['destination']['host']
    dr = f"""
apiVersion: networking.istio.io/v1alpha3
kind: DestinationRule
metadata:
  name: {data['name']}-{data['metadata']['namespace']}-dr
  namespace: {data['metadata']['namespace']}
spec:
  host: {host}
  trafficPolicy:
    outlierDetection:
      consecutiveErrors: 3
      interval: 5s
      baseEjectionTime: 2s
      maxEjectionPercent: 50
    connectionPool:
      tcp:
        connectTimeout: 1500ms
"""
    dr_obj = yaml.safe_load(dr)
    disable_destination = False
    if "destination" in data:
        disable_destination = data['destination'].get("disable", disable_destination)
        port = data["match_routes"]["http"][0]["route"][0]["destination"][
            "port"
        ]["number"]
        if "tls" in data["destination"]:
            if 'trafficPolicy' not in dr_obj['spec']:
                dr_obj["spec"]["trafficPolicy"] = {}
            dr_obj["spec"]["trafficPolicy"]["portLevelSettings"][0]["tls"] = data[
                "destination"
            ]["tls"]
            dr_obj["spec"]["trafficPolicy"]["portLevelSettings"][0]["port"]["number"] = port
        if "loadBalancer" in data["destination"]:
            if 'trafficPolicy' not in dr_obj['spec']:
                dr_obj["spec"]["trafficPolicy"] = {}
            dr_obj["spec"]["trafficPolicy"]["loadBalancer"] = data["destination"][
                "loadBalancer"
            ]
    if not disable_destination:
        print("---")
         # See https://github.com/yaml/pyyaml/pull/129 for why the copy
        dr_to_dump = json.loads(json.dumps(dr_obj))
        print(yaml.dump(dr_to_dump, indent=2, default_flow_style=False))

gen(
    data,
    data["name"],
    data["metadata"]["namespace"],
    data["hostname"],
    data["match_routes"],
    data["issuer"],
)
