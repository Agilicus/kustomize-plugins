#!/usr/bin/env /usr/bin/python3

import pkg_resources
pkg_resources.require('PyYAML>=5.1.1')

import copy
import sys
import textwrap
from itertools import tee
import yaml
import hashlib
from collections import defaultdict
import json

import gateway


def chash(w):
    h = hashlib.sha256(w.encode("utf-8"))
    return h.hexdigest()[:4]


with open(sys.argv[1], "r") as stream:
    try:
        rd = lambda: defaultdict(rd)
        data = rd()
        data.update(yaml.safe_load(stream))
    except yaml.YAMLError as exc:
        print(
            "Error parsing IstioIngressGenerator generator input (%s)",
            file=sys.stderr,
        )
        sys.exit(1)

if not "namespace" in data["metadata"]:
    data["metadata"]["namespace"] = "default"


def make_gateway(data, secret_name, allow_plaintext):
    gw = yaml.safe_load(gateway.spec.format(data=data))

    https_server = yaml.safe_load(gateway.base_server.format(data=data,
                                                             secret_name=secret_name))
    gw["spec"]["servers"].append(https_server)
    if allow_plaintext:
        http_server = copy.deepcopy(https_server)
        del http_server["tls"]
        http_server["port"]["number"] = 80
        http_server["port"]["protocol"] = "HTTP"
        http_server["port"]["name"] = "http-default"
        gw["spec"]["servers"].append(http_server)

    return gw


def gen(data, name, namespace, hostname, match_routes, issuer):
    uhash_name = f"{data['name']}-{data['metadata']['namespace']}"
    hash_name = chash(uhash_name)
    secret_name = f"h{hash_name}-{data['name']}-{data['metadata']['namespace']}-certificate"
    allow_plaintext = data.get("allow_plaintext", False)
    cert = f"""
---
apiVersion: certmanager.k8s.io/v1alpha1
kind: Certificate
metadata:
  name: {data['name']}-{data['metadata']['namespace']}-certificate
  namespace: istio-system
spec:
  secretName: {secret_name}
  issuerRef:
    name: {data['issuer']}
  commonName: {data['hostname']}
  dnsNames:
    - {data['hostname']}
  acme:
    config:
      - http01:
          ingressClass: istio
        domains:
          - {data['hostname']}"""

    vs = f"""
---
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: {data['name']}-{data['metadata']['namespace']}-vs
  namespace: {data['metadata']['namespace']}
spec:
  hosts:
    - {data['hostname']}
  gateways:
    - istio-system/{data['name']}-{data['metadata']['namespace']}-gw
"""

    gw = make_gateway(data, secret_name, allow_plaintext)

    print(cert)
    print(vs)
    print(textwrap.indent(yaml.dump(data["match_routes"], indent=2), 2 * " "))
    print ("---")
    print(yaml.dump(gw))
    if "cookie_hash" in data and data["cookie_hash"]:
        data["destination"]["loadBalancer"]["consistentHash"]["httpCookie"][
            "name"
        ] = "agilicus-lb"
        data["destination"]["loadBalancer"]["consistentHash"]["httpCookie"][
            "ttl"
        ] = "0s"
    if "destination" in data:
        host = data['match_routes']['http'][0]['route'][0]['destination']['host']
        port = data["match_routes"]["http"][0]["route"][0]["destination"][
            "port"
        ]["number"]
        dr = f"""
apiVersion: networking.istio.io/v1alpha3
kind: DestinationRule
metadata:
  name: {data['name']}-{data['metadata']['namespace']}-dr
  namespace: {data['metadata']['namespace']}
spec:
  host: {host}
  trafficPolicy:
    outlierDetection:
      consecutiveErrors: 2
      interval: 5s
      baseEjectionTime: 10m
      maxEjectionPercent: 50
"""
        dr = yaml.safe_load(dr)
        if "tls" in data["destination"]:
            if 'trafficPolicy' not in dr['spec']:
                dr["spec"]["trafficPolicy"] = {}
            dr["spec"]["trafficPolicy"]["portLevelSettings"][0]["tls"] = data[
                "destination"
            ]["tls"]
            dr["spec"]["trafficPolicy"]["portLevelSettings"][0]["port"]["number"] = port
        if "loadBalancer" in data["destination"]:
            if 'trafficPolicy' not in dr['spec']:
                dr["spec"]["trafficPolicy"] = {}
            dr["spec"]["trafficPolicy"]["loadBalancer"] = data["destination"][
                "loadBalancer"
            ]
        # See https://github.com/yaml/pyyaml/pull/129 for why the copy
        dr = json.loads(json.dumps(dr))
        print("---")
        print( yaml.dump(dr, indent=2, default_flow_style=False))

gen(
    data,
    data["name"],
    data["metadata"]["namespace"],
    data["hostname"],
    data["match_routes"],
    data["issuer"],
)
