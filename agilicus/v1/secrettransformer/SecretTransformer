#!/usr/bin/env /usr/bin/python3

import sys
import yaml
import shutil
import subprocess
import os
import re

with open(sys.argv[1], "r") as stream:
    try:
        data = yaml.safe_load(stream)
    except yaml.YAMLError as exc:
        print("Error parsing SecretTransformer input", file=sys.stderr)
        sys.exit(1)

sops = shutil.which(
    "sops",
    path="/bin:/usr/bin:/snap/bin:%s/go/bin" % os.path.expanduser("~"),
)
if not sops:
    print("Error in SecretTransformer: sops not on path", file=sys.stderr)
    sys.exit(1)

if "source" not in data:
    data["source"] = "secrets.enc.yaml"

try:
    with subprocess.Popen([sops, '-d', data["source"]], stdout=subprocess.PIPE) as f:
            secrets = yaml.safe_load(f.stdout)
except subprocess.CalledProcessError as exc:
    print("Is your secret-file %s in %s dir?" % (data["source"], os.getcwd()), file=sys.stderr)
    print(f"Error calling sops: {exc}", file=sys.stderr)
    sys.exit(1)

if not secrets:
    print("Error: secrets is empty", file=sys.stderr)
    sys.exit(1)

# Now decimate keys. If keys = "*" keep all, else keep only ref ones
if not (len(data['keys']) == 1 or data['keys'][0] == "*"):
    for key in list(secrets):
        if key not in data['keys']:
            secrets.pop(key)

rep = dict((re.escape("${sops:" + k + "}"), v) for k, v in secrets.items()) 
pattern = re.compile("|".join(rep.keys()))
text = sys.stdin.read()
text = pattern.sub(lambda m: rep[re.escape(m.group(0))], text)
print(text)
