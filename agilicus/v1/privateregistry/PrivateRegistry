#!/usr/bin/python3

import pkg_resources
pkg_resources.require('PyYAML>=5.1.1')

from io import StringIO
import re
import sys
import yaml
import shutil

with open(sys.argv[1], "r") as stream:
    try:
        data = yaml.safe_load(stream)
    except yaml.YAMLError as exc:
        print("Error parsing PrivateRegistry input", file=sys.stderr)
        sys.exit(1)

match_list = [
    "DaemonSet",
    "Deployment",
    "StatefulSet",
    "ReplicaSet",
    "CronJob",
]

def add_cred(obj, secret):
    if obj["kind"] == "CronJob":
        jp = obj["spec"]["jobTemplate"]["spec"]["template"]["spec"]
    if (
        obj["kind"] == "Deployment"
        or obj["kind"] == "StatefulSet"
        or obj["kind"] == "ReplicaSet"
    ):
        jp = obj["spec"]["template"]["spec"]
        if 'imagePullSecrets' not in jp:
            jp['imagePullSecrets'] = []
        jp["imagePullSecrets"].append({"name": secret})
    print("---")
    print(yaml.dump(obj, default_flow_style=False))


def scrub(raw):
    """ This patches up some yaml issues that arise from a difference of
        opinion on quoting of oerators. E.g. prometheus bundle has:
        enum: [ '!=', '=', ...]
        and kustomize removes the '' around the =.
    """
    raw = re.sub(r'- =~$', "- '=~'", raw, flags=re.M |re.DOTALL)
    raw = re.sub(r'- =$', "- '='", raw, flags=re.M |re.DOTALL)
    return raw


try:
    raw_data = scrub(sys.stdin.read())
    f = StringIO(raw_data)
    for yaml_input in yaml.safe_load_all(f):
        if yaml_input and yaml_input["kind"] in match_list:
            add_cred(yaml_input, data["secret"])
        else:
            print("---")
            print(yaml.dump(yaml_input, default_flow_style=False))
except yaml.YAMLError as exc:
    print("Error parsing YAML in PrivateRegistry\n\n%s\n\n" % input, file=sys.stderr)
    sys.exit(1)

## I would like to emit the secrets now, but cannot, a Transformer cannot
## emit
