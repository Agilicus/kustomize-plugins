#!/usr/bin/env /usr/bin/python3

from importlib.metadata import version
import yaml
if version('PyYAML') < '5.1.1':
    print("ERROR: PyYAML must be >= 5.1.1")
    sys.exit(1)

import sys
import yaml
import shutil
import os
import subprocess
import re
import zlib
import base64


with open(sys.argv[1], 'r') as stream:
    try:
        cfg = yaml.safe_load(stream)
    except yaml.YAMLError as exc:
        print("Error parsing SecretMerge input (%s)", file=sys.stderr)
        sys.exit(1)

if 'type' not in cfg:
    cfg['type'] = "Secret"

if cfg['type'] not in ['Secret','ConfigMap']:
    print("Error: type must be one of Secret|ConfigMap", file=sys.stderr)
    sys.exit(-1)

yaml.SafeDumper.org_represent_str = yaml.SafeDumper.represent_str

def repr_str(dmp, data):
    if '\n' in data:
        return dmp.represent_scalar(u'tag:yaml.org,2002:str', data, style='|')
    return dmp.org_represent_str(data)

yaml.add_representer(str, repr_str, Dumper=yaml.SafeDumper)

def find_file(f):
    """ if file is in current dir, return it, else return it from the PWD.
        Why? Kustomize changes directory, but leaves PWD alone. This allows
        us to have secrets.enc.yaml in the kustomization dir, or deploy
        dir
    """
    try:
        os.stat(f)
        return f
    except FileNotFoundError:
        return os.path.join(os.environ['PWD'], f)

def sops_fetch(cfg, keys):
    sops = shutil.which(
        "sops", path="/bin:/usr/bin:/snap/bin:%s/go/bin" % os.path.expanduser("~")
    )
    if not sops:
        print("Error in SecretTransformer: sops not on path", file=sys.stderr)
        sys.exit(1)

    if "secret_source" not in cfg:
        cfg["secret_source"] = "secrets.enc.yaml"

    sfile = find_file(cfg["secret_source"])
    try:
        with subprocess.Popen(
            [sops, "-d", sfile], stdout=subprocess.PIPE
        ) as f:
            secrets = yaml.safe_load(f.stdout)
    except subprocess.CalledProcessError as exc:
        print(
            "Is your secret-file %s in %s dir?" % (cfg["secret_source"], os.getcwd()),
            file=sys.stderr,
        )
        print(f"Error calling sops: {exc}", file=sys.stderr)
        sys.exit(1)

    if not secrets:
        print("Error: secrets is empty", file=sys.stderr)
        sys.exit(1)

    # Now decimate keys. If keys = "*" keep all, else keep only ref ones
    if not (keys[0] == "*"):
        for key in list(secrets):
            if key not in keys:
                secrets.pop(key)

    hash_v = 0
    for k, v in secrets.items():
        hash_v = hash_v ^ zlib.adler32(bytes(v, 'utf-8'))
    hash_v = int(hash_v / 10000000) + int(hash_v % 10000000)

    return secrets, hash_v

def match(doc, cfg):
    if doc['kind'] == cfg['type']:
        if 'namespace' in cfg['metadata']:
          if 'namespace' in doc['metadata'] and cfg['metadata']['namespace'] == doc['metadata']['namespace']:
              if re.match(cfg['metadata']['name'], doc['metadata']['name']):
                  return True
        else:
          if re.match(cfg['metadata']['name'], doc['metadata']['name']):
              return True

    return False

def convertData(data):
    stringData = {}
    for d, v in data.items():
        stringData[d] = str(base64.b64decode(v), 'utf-8')
    return stringData

def replace(doc, cfg):
    secrets, cfg['hash'] = sops_fetch(cfg, cfg['secret'])
    if doc['kind'] == 'Secret' and 'data' in doc:
        doc['stringData'] = convertData(doc['data'])
        del doc['data']
    if doc['kind'] == 'ConfigMap' and 'data' not in doc:
        doc['data'] = {}
    if doc['kind'] == 'Secret' and 'stringData' not in doc:
        doc['stringData'] = {}
    if doc['kind'] == 'ConfigMap':
        dmap = doc['data']
    else:
        dmap = doc['stringData']
    for k, v in secrets.items():
        dmap[k] = v
    return doc

try:
    if len(sys.argv) > 2:
        f = open(sys.argv[2], 'r')
    else:
        f = sys.stdin
    for doc in yaml.safe_load_all(f):
        if doc and match(doc, cfg):
            doc = replace(doc, cfg)
        print("---")
        print(yaml.safe_dump(doc, default_flow_style=False))
except yaml.YAMLError as exc:
    print("Error parsing YAML in SecretMerge", file=sys.stderr)
    sys.exit(1)

