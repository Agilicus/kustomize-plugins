#!/usr/bin/env /usr/bin/python3

import pkg_resources
pkg_resources.require('PyYAML>=5.1.1')

import sys
import yaml
import shutil
import subprocess
import os
import re

with open(sys.argv[1], "r") as stream:
    try:
        data = yaml.safe_load(stream)
    except yaml.YAMLError as exc:
        print("Error parsing DevSmall input", file=sys.stderr)
        sys.exit(1)

d = data.get('data', {})
filters = d.get("feature_filters", {})

try:
    for yaml_input in yaml.safe_load_all(sys.stdin):
        if 'kind' in yaml_input and yaml_input['kind'] == 'Deployment':
            if 'metadata' in yaml_input and yaml_input.get('metadata',{}).get('labels', {}).get('app') != 'agent-server':
                # allow the agent-server to utilize a rolling update strategy for local upgrade testing
                yaml_input['spec']['strategy'] = { "type": "Recreate" }
            if yaml_input['metadata']['namespace'] == 'portal':
                if yaml_input['metadata']['name'] in ['master-portal', 'alpha-portal']:
                    yaml_input['spec']['replicas'] = 0
            if yaml_input['metadata']['namespace'] == 'profile':
                if yaml_input['metadata']['name'] in ['alpha-profile']:
                    yaml_input['spec']['replicas'] = 0

            if filters.get("rabbitmq", True):
                for container in yaml_input['spec']['template']['spec']['containers']:
                    for num, env in enumerate(container.get('env', [])):
                        if env['name'] == 'AMQP_HOST':
                            container['env'].pop(num)
                            break

        print("---")
        print(yaml.dump(yaml_input, default_flow_style=False))
except yaml.YAMLError as exc:
    print("Error parsing YAML input\n\n%s\n\n" % input, file=sys.stderr)

