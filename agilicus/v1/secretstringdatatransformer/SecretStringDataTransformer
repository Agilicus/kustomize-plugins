#!/usr/bin/env /usr/bin/python3

import pkg_resources
pkg_resources.require('PyYAML>=5.1.1')

import sys
import yaml
import os
import base64

with open(sys.argv[1], "r") as stream:
    try:
        cfg = yaml.safe_load(stream)
    except yaml.YAMLError as exc:
        print("Error parsing SecretTransformer input", file=sys.stderr)
        sys.exit(1)

yaml.SafeDumper.org_represent_str = yaml.SafeDumper.represent_str

def repr_str(dmp, data):
    if '\n' in data:
        return dmp.represent_scalar(u'tag:yaml.org,2002:str', data, style='|')
    return dmp.org_represent_str(data)

yaml.add_representer(str, repr_str, Dumper=yaml.SafeDumper)


def match(doc, skiplist):
    for s in skiplist:
        if "*" in s:
            return True
        if s == doc["metadata"]["name"]:
            return True
        if ("namespace" in doc["metadata"] and 
            s == doc["metadata"]["namespace"] + "/" + doc["metadata"]["name"]):
            return True
    return False


def convertData(data):
    stringData = {}
    if data:
        for d, v in data.items():
            stringData[d] = str(base64.b64decode(v), 'utf-8')
    return stringData


def convert(doc, cfg):
    if doc["kind"] == "Secret":
        if "skip" in cfg and not match(doc, cfg["skip"]):
            if "convert" in cfg and match(doc, cfg["convert"]):
                if "data" in doc:
                    doc["stringData"] = convertData(doc["data"])
                    del doc['data']
    return doc


try:
    if len(sys.argv) > 2:
        f = open(sys.argv[2], "r")
    else:
        f = sys.stdin
    for doc in yaml.safe_load_all(f):
        doc = convert(doc, cfg)
        print("---")
        print(yaml.safe_dump(convert(doc, cfg)))
except yaml.YAMLError as exc:
    print("Error parsing YAML in SecretStringDataTransformer", file=sys.stderr)
    sys.exit(1)
