#!/usr/bin/env /usr/bin/python3

from importlib.metadata import version
import yaml
if version('PyYAML') < '5.1.1':
    print("ERROR: PyYAML must be >= 5.1.1")
    sys.exit(1)
import sys
import textwrap
from itertools import tee
#import yaml
import shutil
import os
import subprocess
import re
import zlib
import ruamel.yaml

#if version('PyYAML') < '5.1.1':
#    print("ERROR: PyYAML must be >= 5.1.1")
#    sys.exit(1)

from deployment import deployment
from poddisruptionbudget import poddisruptionbudget
from virt_service import virt_service
from dest_rule import dest_rule
from service import service
from database import database
from secret import secret
from service_monitor import service_monitor
from alerting_rules import alerting_rules

import opa_sidecar

yaml = ruamel.yaml.YAML()
API_CONTAINER_INDEX = 0


def add_mount(cfg, vars, prefix):
    for mounts in vars:
        path = mounts["path"]

        if "name" not in mounts:
            # here the specific secret name is not specified, which means use the
            # the api generated secret object
            mounts["name"] = f"{cfg['name_version']}-{cfg['name']}-{cfg['hash']}"

        name = prefix + mounts["name"]
        _mount_obj = {"mountPath": path, "name": name}

        if "subPath" in mounts:
            _mount_obj["subPath"] = mounts["subPath"]

        volumeMount_name = mounts["name"]

        deployment["spec"]["template"]["spec"]["containers"][API_CONTAINER_INDEX][
            "volumeMounts"
        ].append(_mount_obj)
        if prefix == "s-":
            deployment["spec"]["template"]["spec"]["volumes"].append(
                {"name": name, "secret": {"secretName": volumeMount_name}}
            )
        elif prefix == "c-":
            deployment["spec"]["template"]["spec"]["volumes"].append(
                {"name": name, "configMap": {"name": volumeMount_name}}
            )


with open(sys.argv[1], "r") as stream:
    try:
        cfg = yaml.load(stream)
    except yaml.YAMLError as exc:
        print("Error parsing ApiGenerator input (%s)", file=sys.stderr)
        sys.exit(1)

if len(cfg["versions"][0]) == 0:
    cfg["versions"][0] = "all"

if "name_version" not in cfg:
    cfg["name_version"] = cfg["versions"][0].split("/")[0]

if "replicas" not in cfg:
    cfg["replicas"]="2"

if "mem_limit" not in cfg:
    cfg["mem_limit"]="400Mi"

if "mem_request" not in cfg:
    cfg["mem_request"]="200Mi"

if "liveness_path" not in cfg:
    cfg["liveness_path"] = "/healthz"

if "readiness_path" not in cfg:
    cfg["readiness_path"] = "/healthz"

def find_file(f):
    """ if file is in current dir, return it, else return it from the PWD.
        Why? Kustomize changes directory, but leaves PWD alone. This allows
        us to have secrets.enc.yaml in the kustomization dir, or deploy
        dir
    """
    try:
        os.stat(f)
        return f
    except FileNotFoundError:
        return os.path.join(os.environ["PWD"], f)


def build_hash(items):
    hash_v = 0
    for v in items:
        hash_v = hash_v ^ zlib.adler32(bytes(v, "utf-8"))
    hash_v = int(hash_v / 10000000) + int(hash_v % 10000000)
    return hash_v


def sops_fetch(cfg, keys):
    sops = shutil.which(
        "sops", path="/bin:/usr/bin:/snap/bin:%s/go/bin" % os.path.expanduser("~")
    )
    if not sops:
        print("Error in SecretTransformer: sops not on path", file=sys.stderr)
        sys.exit(1)

    if "secret_source" not in cfg:
        cfg["secret_source"] = "secrets.enc.yaml"

    sfile = find_file(cfg["secret_source"])
    try:
        with subprocess.Popen([sops, "-d", sfile], stdout=subprocess.PIPE) as f:
            secrets = yaml.load(f.stdout)
    except subprocess.CalledProcessError as exc:
        print(
            "Is your secret-file %s in %s dir?" % (cfg["secret_source"], os.getcwd()),
            file=sys.stderr,
        )
        print(f"Error calling sops: {exc}", file=sys.stderr)
        sys.exit(1)

    if not secrets:
        print("Error: secrets is empty", file=sys.stderr)
        sys.exit(1)

    # Now decimate keys. If keys = "*" keep all, else keep only ref ones
    if not (keys[0] == "*"):
        for key in list(secrets):
            if key not in keys:
                secrets.pop(key)

    hash = build_hash(secrets.values())
    return secrets, hash


def print_obj(obj_to_dump):
    print("---")
    yaml.dump(obj_to_dump, sys.stdout)


def add_policy_agent(cfg: dict, deployment: cfg):
    default_audience = "urn:api:agilicus" + ":" + cfg["policy-agent"].get("auth-name", cfg["name"])
    if "audience" not in cfg["policy-agent"]:
        if cfg["policy-agent"].get("default-aud", False):
            cfg["policy-agent"]["audience"] = "urn:api:agilicus" 
        else:
            cfg["policy-agent"]["audience"] = default_audience

    container = yaml.load(opa_sidecar.container.format(cfg=cfg))
    for opa_env in cfg.get('opa_env', []):
        container["env"].append({
            'name': opa_env['name'],
            'value': opa_env['value'],
        })

    init_container = yaml.load(opa_sidecar.init_container.format(cfg=cfg))
    volumes = yaml.load(opa_sidecar.volumes.format(cfg=cfg))
    config_str = opa_sidecar.config.format(cfg=cfg)
    filter_dict  = yaml.load(opa_sidecar.envoy_filter.format(cfg=cfg))
    do_request_body = True
    if "with_request_body" in cfg["policy-agent"]:
        do_request_body = cfg["policy-agent"]["with_request_body"]

    if not do_request_body:
        del filter_dict['spec']["configPatches"][0]["patch"]["value"]["typed_config"]["with_request_body"]

    # Just hash the whole thing. It's simple enough.
    hash = build_hash([config_str])
    config_obj = yaml.load(config_str)
    cfg_name = config_obj["metadata"]["name"]
    cfg_name = f"{cfg_name}-{hash}"

    config_obj["metadata"]["name"] = cfg_name
    volumes[0]["configMap"]["name"] = cfg_name
    pod_spec = deployment["spec"]["template"]["spec"]

    pod_spec["containers"].append(container)
    init_containers = pod_spec.setdefault("initContainers", [])
    init_containers.append(init_container)
    pod_spec["volumes"].extend(volumes)

    print_obj(config_obj)
    print_obj(filter_dict)


if "secret" in cfg and len(cfg["secret"]):
    secrets, cfg["hash"] = sops_fetch(cfg, cfg["secret"])
else:
    secrets = []
    cfg["hash"] = "none"

secret = yaml.load(secret.format(cfg=cfg))
deployment = yaml.load(deployment.format(cfg=cfg))

poddisruptionbudget = yaml.load(poddisruptionbudget.format(cfg=cfg))

virt_service = yaml.load(virt_service.format(cfg=cfg))
dest_rule = yaml.load(dest_rule.format(cfg=cfg))
service = yaml.load(service.format(cfg=cfg))
first_prefix = None
for version in cfg["versions"]:
    if version == "all":
        if first_prefix is None:
            first_prefix = f"/{cfg['name']}"
        match = {"uri": {"prefix": f"/{cfg['name']}"}}
    else:
        if re.match("^v[0-9]", version):
            if "/" in version:
                if first_prefix is None:
                    first_prefix = f"/{version}"
                match = {"uri": {"prefix": f"/{version}"}}
            else:
                if first_prefix is None:
                    first_prefix = f"/{version}/{cfg['name']}"
                match = {"uri": {"prefix": f"/{version}/{cfg['name']}"}}
        else:
            if first_prefix is None:
                first_prefix = f"/{version}"
            match = {"uri": {"prefix": f"/{version}"}}
    virt_service["spec"]["http"][0]["match"].append(match)

for match_obj in cfg.get("uri_matches", []):
    match = {"uri": match_obj}
    virt_service["spec"]["http"][0]["match"].append(match)

match = {
    "match": [{"uri": {"prefix": f"{first_prefix}{cfg['liveness_path']}"}}],
    "rewrite": {"uri": f"{cfg['liveness_path']}"},
    "route": [
        {
            "destination": {
                "host": f"{cfg['name_version']}-{cfg['name']}.api.svc.cluster.local",
                "port": {"number": cfg["port"]},
            }
        }
    ],
    "headers": {
        "response": {
            "set": {"Strict-Transport-Security": "max-age=63072000; includeSubDomains"},
            "remove": ["x-envoy-upstream-service-time"],
        }
    },
    "retries": {
        "attempts": 5,
        "retryOn": "connect-failure,refused-stream,unavailable,cancelled,resource-exhausted,5xx,retriable-status-codes"
    }
}
virt_service["spec"]["http"].insert(0, match)

small_mode = os.environ.get("DEV_SIZE_SMALL", False)
if small_mode:
    cfg["env"].append({'name': 'DEV_SIZE_SMALL', 'value': 'True'})
    dest_rule['spec']['trafficPolicy']['outlierDetection'] = {}

cfg["env"].append({"name": "API_ROOT", "value": "api.__ROOT_DOMAIN__"})
deployment["spec"]["template"]["spec"]["containers"][API_CONTAINER_INDEX]["env"] = cfg[
    "env"
]
main_container_args = cfg.get("args", None)
if main_container_args:
    deployment["spec"]["template"]["spec"]["containers"][API_CONTAINER_INDEX]["args"] = main_container_args

if "mounts" in cfg:
    if "secrets" in cfg["mounts"]:
        add_mount(cfg, cfg["mounts"]["secrets"], "s-")
    if "configMap" in cfg["mounts"]:
        add_mount(cfg, cfg["mounts"]["configMap"], "c-")

policy_agent_cfg = cfg.get("policy-agent", {})
if policy_agent_cfg.get("enabled", False):
    add_policy_agent(cfg, deployment)

print_obj(deployment)
print_obj(virt_service)
print_obj(dest_rule)
print_obj(service)
if int(cfg["replicas"]) > 1:
    print_obj(poddisruptionbudget)


if "db" in cfg:
    db_cfg = cfg["db"]
    db_cfg.setdefault("db_name", db_cfg["name"])
    database = yaml.load(database.format(cfg=cfg))
    print_obj(database)

if "monitor" in cfg:
    service_monitor = yaml.load(service_monitor.format(cfg=cfg))
    print_obj(service_monitor)
    alerting_rules = yaml.load(alerting_rules.format(cfg=cfg))
    print_obj(alerting_rules)

secret["stringData"] = secrets
print_obj(secret)
