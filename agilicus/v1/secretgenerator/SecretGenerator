#!/usr/bin/env /usr/bin/python3

import sys
import yaml
import json
import shutil
import os
import subprocess
import re
import zlib
import base64
from collections import OrderedDict


from secret import secret
from config import config

with open(sys.argv[1], 'r') as stream:
    try:
        cfg = yaml.safe_load(stream)
    except yaml.YAMLError as exc:
        print("Error parsing SecretGenerator input (%s)", file=sys.stderr)
        sys.exit(1)

if 'type' not in cfg:
    cfg['type'] = "Secret"

def find_file(f):
    """ if file is in current dir, return it, else return it from the PWD.
        Why? Kustomize changes directory, but leaves PWD alone. This allows
        us to have secrets.enc.yaml in the kustomization dir, or deploy
        dir
    """
    try:
        os.stat(f)
        return f
    except FileNotFoundError:
        return os.path.join(os.environ['PWD'], f)

def sops_fetch(cfg, keys):
    base64Encode = False
    sops = shutil.which(
        "sops", path="/bin:/usr/bin:/snap/bin:%s/go/bin" % os.path.expanduser("~")
    )
    if not sops:
        print("Error in SecretTransformer: sops not on path", file=sys.stderr)
        sys.exit(1)

    if "secret_source" not in cfg:
        cfg["secret_source"] = "secrets.enc.yaml"

    sfile = find_file(cfg["secret_source"])
    try:
        with subprocess.Popen(
            [sops, "-d", sfile], stdout=subprocess.PIPE
        ) as f:
            if sfile.endswith(".json"):
                secrets = json.load(f.stdout)
                base64Encode = True
            else:
                secrets = yaml.safe_load(f.stdout)
    except subprocess.CalledProcessError as exc:
        print(
            "Is your secret-file %s in %s dir?" % (cfg["secret_source"], os.getcwd()),
            file=sys.stderr,
        )
        print(f"Error calling sops: {exc}", file=sys.stderr)
        sys.exit(1)

    if not secrets:
        print("Error: secrets is empty", file=sys.stderr)
        sys.exit(1)

    output_secrets = secrets
    # Now decimate keys. If keys = "*" keep all, else keep only ref ones
    # If the reference includes a '=', set the secret key in the resulting
    # secret to be the lhs
    if not (keys[0] == "*"):
        output_secrets = dict()
        for key in keys:
            bits = [bit.strip() for bit in key.split("=")]
            output_key = key
            secret_key = key
            if len(bits) > 1:
                output_key = bits[0]
                secret_key = bits[1]

            if secret_key in secrets:
                output_secrets[output_key] = secrets[secret_key]

    hash_v = 0
    for k, v in output_secrets.items():
        if isinstance(v,dict):
            v_bytes = bytes(json.dumps(v), 'utf-8')
        else:
            v_bytes = bytes(v, 'utf-8')
        hash_v = hash_v ^ zlib.adler32(v_bytes)
    hash_v = int(hash_v / 10000000) + int(hash_v % 10000000)

    secret_type = "stringData"
    if base64Encode:
        secret_type = "data"
        new_dict = {}
        for k, v in output_secrets.items():
            new_dict[k] = base64.b64encode(bytes(json.dumps(v), 'utf-8'))
        output_secrets = new_dict

    return output_secrets, hash_v, secret_type

secrets, cfg['hash'], secretType = sops_fetch(cfg, cfg['secret'])


if cfg['type'] == "Secret":
    cfg.setdefault("secret_type", "Opaque")
    secret = yaml.safe_load(secret.format(cfg=cfg))
    secret[secretType] = secrets
    obj = secret
elif cfg['type'] == "ConfigMap":
    config = yaml.safe_load(config.format(cfg=cfg))
    config['data'] = secrets
    obj = config
else:
    print("Error: type must be one of Secret|ConfigMap", file=sys.stderr)
    sys.exit(-1)

if 'namespace' in cfg['metadata']:
    obj['metadata']['namespace'] = cfg['metadata']['namespace']

if 'annotations' in cfg['metadata']:
    obj['metadata']['annotations'] = cfg['metadata']['annotations']

if 'labels' in cfg['metadata']:
    obj['metadata']['labels'] = cfg['metadata']['labels']

print("---")
yaml.dump(obj, sys.stdout)
